Based on your project's requirements, here‚Äôs a detailed, structured list of the **database schema tables** you'll need, clearly defining fields, keys, and their relationships.

---

## üóÇÔ∏è **Database Schema (MySQL)**

### ‚úÖ **1. Restaurants Table**
```sql
Restaurants (
  restaurant_id INT PRIMARY KEY AUTO_INCREMENT,
  name VARCHAR(100) NOT NULL,
  address VARCHAR(255) NOT NULL,
  contact_number VARCHAR(20),
  cuisine_type VARCHAR(50),
  rating FLOAT DEFAULT 0.0,
  information_update_time TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
)
```

---

### ‚úÖ **2. Customers Table**
```sql
Customers (
  customer_id INT PRIMARY KEY AUTO_INCREMENT,
  name VARCHAR(100) NOT NULL,
  address VARCHAR(255) NOT NULL,
  phone VARCHAR(20),
  email VARCHAR(100) UNIQUE NOT NULL,
  account_status ENUM('Active', 'Inactive') DEFAULT 'Active',
  registration_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  information_update_time TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
)
```

---

### ‚úÖ **3. Menus Table**
```sql
Menus (
  menu_id INT PRIMARY KEY AUTO_INCREMENT,
  restaurant_id INT,
  dish_name VARCHAR(100) NOT NULL,
  description TEXT,
  price DECIMAL(8, 2) NOT NULL,
  availability ENUM('In Stock', 'Out of Stock') DEFAULT 'In Stock',
  information_update_time TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  FOREIGN KEY (restaurant_id) REFERENCES Restaurants(restaurant_id) ON DELETE CASCADE
)
```

---

### ‚úÖ **4. Orders Table**
```sql
Orders (
  order_id INT PRIMARY KEY AUTO_INCREMENT,
  customer_id INT,
  menu_id INT,
  order_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  delivery_status ENUM('Pending', 'Delivered', 'Cancelled') DEFAULT 'Pending',
  delivery_time TIMESTAMP NULL,
  total_amount DECIMAL(8, 2) NOT NULL,
  payment_status ENUM('Paid', 'Unpaid') DEFAULT 'Unpaid',
  FOREIGN KEY (customer_id) REFERENCES Customers(customer_id),
  FOREIGN KEY (menu_id) REFERENCES Menus(menu_id)
)
```

- **Note:** If one order includes multiple dishes, you need a separate associative table, e.g., `OrderItems`.

---

### ‚úÖ **5. Delivery Personnel Table**
```sql
DeliveryPersonnel (
  delivery_id INT PRIMARY KEY AUTO_INCREMENT,
  name VARCHAR(100) NOT NULL,
  phone VARCHAR(20),
  assigned_orders INT DEFAULT 0,
  status ENUM('Available', 'Assigned', 'On Delivery') DEFAULT 'Available'
)
```

- **Note:** If you need tracking assignment history, consider creating a separate assignment table.

---

## üü¢ **Optional Advanced Features Schemas (choose according to your selected feature):**

### A) **Customer Feedback and Rating**
```sql
Feedback (
  feedback_id INT PRIMARY KEY AUTO_INCREMENT,
  customer_id INT,
  restaurant_id INT,
  menu_id INT,
  rating INT CHECK (rating BETWEEN 1 AND 5),
  comment TEXT,
  feedback_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  FOREIGN KEY (customer_id) REFERENCES Customers(customer_id),
  FOREIGN KEY (restaurant_id) REFERENCES Restaurants(restaurant_id),
  FOREIGN KEY (menu_id) REFERENCES Menus(menu_id)
)
```

---

### B) **Real-Time Order Tracking**
```sql
OrderTracking (
  tracking_id INT PRIMARY KEY AUTO_INCREMENT,
  order_id INT,
  status ENUM('Preparing', 'Ready for Pickup', 'On the Way', 'Delivered') DEFAULT 'Preparing',
  last_updated TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  FOREIGN KEY (order_id) REFERENCES Orders(order_id)
)
```

---

### C) **Order Recommendation System**
- You might require tables to store customer preferences or order history to make recommendations:

```sql
OrderHistory (
  history_id INT PRIMARY KEY AUTO_INCREMENT,
  customer_id INT,
  menu_id INT,
  order_count INT DEFAULT 1,
  last_ordered TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  FOREIGN KEY (customer_id) REFERENCES Customers(customer_id),
  FOREIGN KEY (menu_id) REFERENCES Menus(menu_id)
)
```

---

## üìå **Recommended Relationships:**

- **Restaurants (1)** ‚Üí **Menus (Many)**
- **Customers (1)** ‚Üí **Orders (Many)**
- **Menus (1)** ‚Üí **Orders (Many)** (or via associative table for multiple items per order)
- **DeliveryPersonnel (1)** ‚Üí **Orders (Many)** (if assignment tracking is required)
- Optional tables linked clearly through foreign keys for advanced features.

---

## üéØ **Next Steps (Week 1):**
- Clearly define and finalize this schema using a visual ER diagram in **MySQL Workbench**.
- Ensure your team reviews and agrees on data types, constraints, and relationships.
- Create SQL scripts to set up your database.

This schema provides a solid foundation, fulfilling all the required functionalities clearly outlined in your project documentation.




---------------------------
Combined :

-- Creating the 'Restaurants' table
CREATE TABLE Restaurants (
    restaurant_id INT AUTO_INCREMENT PRIMARY KEY,
    name VARCHAR(100) NOT NULL,
    address VARCHAR(255) NOT NULL,
    contact_number VARCHAR(20),
    cuisine_type VARCHAR(50),
    rating DECIMAL(3,2),
    information_update_time TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
);

-- Creating the 'Customers' table
CREATE TABLE Customers (
    customer_id INT AUTO_INCREMENT PRIMARY KEY,
    name VARCHAR(100) NOT NULL,
    address VARCHAR(255) NOT NULL,
    phone VARCHAR(20),
    email VARCHAR(100) UNIQUE NOT NULL,
    account_status ENUM('Active', 'Inactive') DEFAULT 'Active',
    registration_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    information_update_time TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
);

-- Creating the 'Menus' table
CREATE TABLE Menus (
    menu_id INT AUTO_INCREMENT PRIMARY KEY,
    restaurant_id INT,
    dish_name VARCHAR(100) NOT NULL,
    description TEXT,
    price DECIMAL(10, 2) NOT NULL,
    availability ENUM('In Stock', 'Out of Stock') DEFAULT 'In Stock',
    information_update_time TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    FOREIGN KEY (restaurant_id) REFERENCES Restaurants(restaurant_id)
);

-- Creating the 'Orders' table
CREATE TABLE Orders (
    order_id INT AUTO_INCREMENT PRIMARY KEY,
    customer_id INT,
    menu_id INT,
    order_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    delivery_status ENUM('Pending', 'Delivered', 'Cancelled') DEFAULT 'Pending',
    delivery_time TIMESTAMP,
    total_amount DECIMAL(10, 2) NOT NULL,
    payment_status ENUM('Paid', 'Unpaid') DEFAULT 'Unpaid',
    FOREIGN KEY (customer_id) REFERENCES Customers(customer_id),
    FOREIGN KEY (menu_id) REFERENCES Menus(menu_id)
);

-- Creating the 'Delivery Personnel' table
CREATE TABLE DeliveryPersonnel (
    delivery_id INT AUTO_INCREMENT PRIMARY KEY,
    name VARCHAR(100) NOT NULL,
    phone VARCHAR(20),
    assigned_orders INT DEFAULT 0,
    status ENUM('Available', 'Assigned', 'On Delivery') DEFAULT 'Available'
);
